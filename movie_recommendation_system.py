# -*- coding: utf-8 -*-
"""Movie Recommendation System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EDJ8Q6IKRF5RQpiiUFsVYRcFNfYFNUcT
"""

import numpy as np
import pandas as pd
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""Data PreProcessing"""

data = pd.read_csv('/content/movies.csv',engine = 'python')
data.head(100)

data.shape

#feature Extraction
features = ['genres','keywords','tagline','cast','director']

#replacing null with null String
for x in features:
  data[x] = data[x].fillna('')

#combining features
combined = data['genres']+' '+data['keywords']+' '+data['tagline']+' '+data['cast']+' '+data['director']
combined

#Encoding the combined data into vectors
vectorizer = TfidfVectorizer()
encoded_vectors = vectorizer.fit_transform(combined)
print(encoded_vectors)

#getting similarity score
similarity = cosine_similarity(encoded_vectors)

similarity.shape

movie_titles = data['title'].tolist()
movie_titles

#Taking User Input
user_input = input('Enter Movie Name: ')

close_match = difflib.get_close_matches(user_input,movie_titles)
close_match

closest = close_match[0]
closest

#retrieving index for the movie
index = data[data.title == closest]['index'].values[0]
index

#getting list of similar movies
similarity_score = list(enumerate(similarity[index]))
similarity_score

#sortng based on similarity score
sorted_scores = sorted(similarity_score, key = lambda x:x[1] , reverse = True)
sorted_scores

#printing the recommendations

print('Recommended Movies Are : \n')
i=1
for movie in sorted_scores:
  indexx = movie[0]
  name = data[data.index==indexx]['title'].values[0]
  if(i<16):
    print(i,'.',name)
    i+=1

"""***RECOMMENDATION SYSTEM***

"""

user_input = input('Enter Movie Name: ')
close_match = difflib.get_close_matches(user_input,movie_titles)
try:
  closest = close_match[0]
except:
  print('Movie Not in List')
index = data[data.title == closest]['index'].values[0]
similarity_score = list(enumerate(similarity[index]))
sorted_scores = sorted(similarity_score, key = lambda x:x[1] , reverse = True)
print('Recommended Movies Are : \n')
i=1
for movie in sorted_scores:
  indexx = movie[0]
  name = data[data.index==indexx]['title'].values[0]
  if(i<16):
    print(i,'->',name)
    i+=1